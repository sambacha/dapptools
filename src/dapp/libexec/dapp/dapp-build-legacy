#!/usr/bin/env bash
### dapp-build-legacy -- compile the source code using --combined-json
### Usage: dapp build-legacy

set -e

IFS=" " read -r -a opts <<<"$SOLC_FLAGS"
json_opts=--combined-json=abi,bin,bin-runtime,srcmap,srcmap-runtime,ast,metadata

$SOLC --help | grep -q -- --storage-layout && json_opts+=,storage-layout
$SOLC --help | grep -q -- --overwrite && opts+=(--overwrite)

opts+=(--libraries "$DAPP_LIBRARIES")

if [[ "$DAPP_REMAPPINGS" ]]; then
	while read -r line; do opts+=("$line"); done <<<"$DAPP_REMAPPINGS"
fi

mapfile -t files < <(find "${DAPP_SRC}" -name '*.sol')
(
	set -x
	$SOLC "${opts[@]}" "${json_opts[@]}" /=/ "${files[@]}" >"${DAPP_JSON}"
)

if [ "$DAPP_BUILD_EXTRACT" ]; then
	mapfile -t contracts < <(jq <"$DAPP_JSON" '.contracts|keys[]' -r | sort -u -t: -k2 | sort)
	data=$(jq <"$DAPP_JSON" '.contracts' -r)
	count=1
	total=${#contracts[@]}
	for path in "${contracts[@]}"; do
		info -ne "Extracting build data... [$count/$total]\\r"
		((count++))
		name="${path#*:}"
		contract=$(echo "$data" | jq '.[''"'"$path"'"'']')
		echo "$contract" | jq '.["abi"]' -r >"$DAPP_OUT/$name.abi"
		echo "$contract" | jq '.["bin"]' -r >"$DAPP_OUT/$name.bin"
		echo "$contract" | jq '.["bin-runtime"]' -r >"$DAPP_OUT/$name.bin-runtime"
		echo "$contract" | jq '.["metadata"]' -r >"$DAPP_OUT/$name.metadata"
	done
	echo
	info "warning: --extract is slow and may have filename collisions. All build data can be found in $DAPP_JSON.\\n"
fi
